-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> E                                 (0)
	E -> num                                           (1)
	E -> bool                                          (2)
	E -> var                                           (3)
	E -> float                                         (4)
	E -> E '+' E                                       (5)
	E -> E '-' E                                       (6)
	E -> E '*' E                                       (7)
	E -> E '/' E                                       (8)
	E -> E '%' E                                       (9)
	E -> E '==' E                                      (10)
	E -> E '>' E                                       (11)
	E -> E '<' E                                       (12)
	E -> E '>=' E                                      (13)
	E -> E '<=' E                                      (14)
	E -> E '&&' E                                      (15)
	E -> E '||' E                                      (16)
	E -> not E                                         (17)
	E -> '-' E                                         (18)
	E -> '(' E ')'                                     (19)
	E -> '(' E E ')'                                   (20)
	E -> if E then E else E                            (21)
	E -> let var '=' E in E end                        (22)
	E -> lam var '->' E                                (23)
	E -> '(' E ',' E ')'                               (24)
	E -> fst E                                         (25)
	E -> snd E                                         (26)
	E -> inl '_' T '(' E ')'                           (27)
	E -> inr '_' T '(' E ')'                           (28)
	E -> case E of '{' inl var '=>' E '|' inr var '=>' E '}'   (29)
	E -> '{' reglist '}'                               (30)
	E -> E '[' var ']'                                 (31)
	reglist -> reg                                     (32)
	reglist -> reglist ',' reg                         (33)
	reg -> var '=' E                                   (34)
	reglistT -> regT                                   (35)
	reglistT -> reglistT ',' regT                      (36)
	regT -> var ':' T                                  (37)
	T -> Bool                                          (38)
	T -> Int                                           (39)
	T -> Float                                         (40)
	T -> T '->' T                                      (41)
	T -> T '*' T                                       (42)
	T -> T '+' T                                       (43)
	T -> '{' reglistT '}'                              (44)
	T -> '(' T ')'                                     (45)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenInt $$ }
	float          { TokenFloat $$ }
	var            { TokenVar $$ }
	bool           { TokenBool $$ }
	'('            { TokenOB }
	')'            { TokenCB }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'/'            { TokenDiv }
	'%'            { TokenMod }
	'=='           { TokenEq }
	'>'            { TokenGt }
	'<'            { TokenLt }
	'>='           { TokenGeq }
	'<='           { TokenLeq }
	'&&'           { TokenAnd }
	'||'           { TokenOr }
	not            { TokenNot }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	let            { TokenLet }
	'='            { TokenAssign }
	in             { TokenIn }
	end            { TokenEnd }
	lam            { TokenLam }
	'->'           { TokenArrow }
	':'            { TokenTypeOf }
	'{'            { TokenOK }
	'}'            { TokenCK }
	','            { TokenComma }
	'['            { TokenOC }
	']'            { TokenCC }
	fst            { TokenFst }
	snd            { TokenSnd }
	inr            { TokenInr }
	inl            { TokenInL }
	'_'            { TokenUnderS }
	case           { TokenCase }
	of             { TokenOf }
	'=>'           { TokenBigArrow }
	'|'            { TokenPipe }
	Int            { TokenTInt }
	Float          { TokenTFloat }
	Bool           { TokenTBool }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	E               rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
	reglist         rules 32, 33
	reg             rule  34
	reglistT        rules 35, 36
	regT            rule  37
	T               rules 38, 39, 40, 41, 42, 43, 44, 45

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . E                                (rule 0)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 3

State 1

	E -> . num                                          (rule 1)

	num            shift, and enter state 2


State 2

	E -> num .                                          (rule 1)

	num            reduce using rule 1
	float          reduce using rule 1
	var            reduce using rule 1
	bool           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'%'            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'<'            reduce using rule 1
	'>='           reduce using rule 1
	'<='           reduce using rule 1
	'&&'           reduce using rule 1
	'||'           reduce using rule 1
	not            reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	let            reduce using rule 1
	in             reduce using rule 1
	end            reduce using rule 1
	lam            reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	','            reduce using rule 1
	'['            reduce using rule 1
	fst            reduce using rule 1
	snd            reduce using rule 1
	inr            reduce using rule 1
	inl            reduce using rule 1
	case           reduce using rule 1
	of             reduce using rule 1
	'|'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parser -> E .                                (rule 0)
	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45
	%eof           accept


State 4

	E -> float .                                        (rule 4)

	num            reduce using rule 4
	float          reduce using rule 4
	var            reduce using rule 4
	bool           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'%'            reduce using rule 4
	'=='           reduce using rule 4
	'>'            reduce using rule 4
	'<'            reduce using rule 4
	'>='           reduce using rule 4
	'<='           reduce using rule 4
	'&&'           reduce using rule 4
	'||'           reduce using rule 4
	not            reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	let            reduce using rule 4
	in             reduce using rule 4
	end            reduce using rule 4
	lam            reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	','            reduce using rule 4
	'['            reduce using rule 4
	fst            reduce using rule 4
	snd            reduce using rule 4
	inr            reduce using rule 4
	inl            reduce using rule 4
	case           reduce using rule 4
	of             reduce using rule 4
	'|'            reduce using rule 4
	%eof           reduce using rule 4


State 5

	E -> var .                                          (rule 3)

	num            reduce using rule 3
	float          reduce using rule 3
	var            reduce using rule 3
	bool           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'%'            reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'<'            reduce using rule 3
	'>='           reduce using rule 3
	'<='           reduce using rule 3
	'&&'           reduce using rule 3
	'||'           reduce using rule 3
	not            reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	let            reduce using rule 3
	in             reduce using rule 3
	end            reduce using rule 3
	lam            reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	','            reduce using rule 3
	'['            reduce using rule 3
	fst            reduce using rule 3
	snd            reduce using rule 3
	inr            reduce using rule 3
	inl            reduce using rule 3
	case           reduce using rule 3
	of             reduce using rule 3
	'|'            reduce using rule 3
	%eof           reduce using rule 3


State 6

	E -> bool .                                         (rule 2)

	num            reduce using rule 2
	float          reduce using rule 2
	var            reduce using rule 2
	bool           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	'%'            reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'<'            reduce using rule 2
	'>='           reduce using rule 2
	'<='           reduce using rule 2
	'&&'           reduce using rule 2
	'||'           reduce using rule 2
	not            reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	end            reduce using rule 2
	lam            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	','            reduce using rule 2
	'['            reduce using rule 2
	fst            reduce using rule 2
	snd            reduce using rule 2
	inr            reduce using rule 2
	inl            reduce using rule 2
	case           reduce using rule 2
	of             reduce using rule 2
	'|'            reduce using rule 2
	%eof           reduce using rule 2


State 7

	E -> '(' . E ')'                                    (rule 19)
	E -> '(' . E E ')'                                  (rule 20)
	E -> '(' . E ',' E ')'                              (rule 24)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 32

State 8

	E -> '-' . E                                        (rule 18)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 31

State 9

	E -> not . E                                        (rule 17)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 30

State 10

	E -> if . E then E else E                           (rule 21)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 29

State 11

	E -> let . var '=' E in E end                       (rule 22)

	var            shift, and enter state 28


State 12

	E -> lam . var '->' E                               (rule 23)

	var            shift, and enter state 27


State 13

	E -> '{' . reglist '}'                              (rule 30)

	var            shift, and enter state 26

	reglist        goto state 24
	reg            goto state 25

State 14

	E -> fst . E                                        (rule 25)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 23

State 15

	E -> snd . E                                        (rule 26)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 22

State 16

	E -> inr . '_' T '(' E ')'                          (rule 28)

	'_'            shift, and enter state 21


State 17

	E -> inl . '_' T '(' E ')'                          (rule 27)

	'_'            shift, and enter state 20


State 18

	E -> case . E of '{' inl var '=>' E '|' inr var '=>' E '}'    (rule 29)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 19

State 19

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> case E . of '{' inl var '=>' E '|' inr var '=>' E '}'    (rule 29)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45
	of             shift, and enter state 76


State 20

	E -> inl '_' . T '(' E ')'                          (rule 27)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 75

State 21

	E -> inr '_' . T '(' E ')'                          (rule 28)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 69

State 22

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> snd E .                                        (rule 26)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 26
	float          reduce using rule 26
	var            reduce using rule 26
	bool           reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'%'            reduce using rule 26
	'=='           reduce using rule 26
	'>'            reduce using rule 26
	'<'            reduce using rule 26
	'>='           reduce using rule 26
	'<='           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	not            reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	let            reduce using rule 26
	in             reduce using rule 26
	end            reduce using rule 26
	lam            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	'['            reduce using rule 26
	fst            reduce using rule 26
	snd            reduce using rule 26
	inr            reduce using rule 26
	inl            reduce using rule 26
	case           reduce using rule 26
	of             reduce using rule 26
	'|'            reduce using rule 26
	%eof           reduce using rule 26


State 23

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> fst E .                                        (rule 25)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 25
	float          reduce using rule 25
	var            reduce using rule 25
	bool           reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'%'            reduce using rule 25
	'=='           reduce using rule 25
	'>'            reduce using rule 25
	'<'            reduce using rule 25
	'>='           reduce using rule 25
	'<='           reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	not            reduce using rule 25
	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	let            reduce using rule 25
	in             reduce using rule 25
	end            reduce using rule 25
	lam            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	'['            reduce using rule 25
	fst            reduce using rule 25
	snd            reduce using rule 25
	inr            reduce using rule 25
	inl            reduce using rule 25
	case           reduce using rule 25
	of             reduce using rule 25
	'|'            reduce using rule 25
	%eof           reduce using rule 25


State 24

	E -> '{' reglist . '}'                              (rule 30)
	reglist -> reglist . ',' reg                        (rule 33)

	'}'            shift, and enter state 67
	','            shift, and enter state 68


State 25

	reglist -> reg .                                    (rule 32)

	'}'            reduce using rule 32
	','            reduce using rule 32


State 26

	reg -> var . '=' E                                  (rule 34)

	'='            shift, and enter state 66


State 27

	E -> lam var . '->' E                               (rule 23)

	'->'           shift, and enter state 65


State 28

	E -> let var . '=' E in E end                       (rule 22)

	'='            shift, and enter state 64


State 29

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> if E . then E else E                           (rule 21)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	then           shift, and enter state 63
	'['            shift, and enter state 45


State 30

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> not E .                                        (rule 17)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 17
	float          reduce using rule 17
	var            reduce using rule 17
	bool           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'%'            reduce using rule 17
	'=='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	not            reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	end            reduce using rule 17
	lam            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	','            reduce using rule 17
	'['            reduce using rule 17
	fst            reduce using rule 17
	snd            reduce using rule 17
	inr            reduce using rule 17
	inl            reduce using rule 17
	case           reduce using rule 17
	of             reduce using rule 17
	'|'            reduce using rule 17
	%eof           reduce using rule 17


State 31

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> '-' E .                                        (rule 18)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 18
	float          reduce using rule 18
	var            reduce using rule 18
	bool           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'%'            reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	'>='           reduce using rule 18
	'<='           reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	not            reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	let            reduce using rule 18
	in             reduce using rule 18
	end            reduce using rule 18
	lam            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	','            reduce using rule 18
	'['            reduce using rule 18
	fst            reduce using rule 18
	snd            reduce using rule 18
	inr            reduce using rule 18
	inl            reduce using rule 18
	case           reduce using rule 18
	of             reduce using rule 18
	'|'            reduce using rule 18
	%eof           reduce using rule 18


State 32

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> '(' E . ')'                                    (rule 19)
	E -> '(' E . E ')'                                  (rule 20)
	E -> '(' E . ',' E ')'                              (rule 24)
	E -> E . '[' var ']'                                (rule 31)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	')'            shift, and enter state 60
	'+'            shift, and enter state 33
	'-'            shift, and enter state 61
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	','            shift, and enter state 62
	'['            shift, and enter state 45
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 59

State 33

	E -> E '+' . E                                      (rule 5)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 58

State 34

	E -> E '-' . E                                      (rule 6)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 57

State 35

	E -> E '*' . E                                      (rule 7)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 56

State 36

	E -> E '/' . E                                      (rule 8)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 55

State 37

	E -> E '%' . E                                      (rule 9)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 54

State 38

	E -> E '==' . E                                     (rule 10)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 53

State 39

	E -> E '>' . E                                      (rule 11)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 52

State 40

	E -> E '<' . E                                      (rule 12)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 51

State 41

	E -> E '>=' . E                                     (rule 13)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 50

State 42

	E -> E '<=' . E                                     (rule 14)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 49

State 43

	E -> E '&&' . E                                     (rule 15)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 48

State 44

	E -> E '||' . E                                     (rule 16)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 47

State 45

	E -> E '[' . var ']'                                (rule 31)

	var            shift, and enter state 46


State 46

	E -> E '[' var . ']'                                (rule 31)

	']'            shift, and enter state 95


State 47

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E '||' E .                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 16
	float          reduce using rule 16
	var            reduce using rule 16
	bool           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           reduce using rule 16
	not            reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	end            reduce using rule 16
	lam            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	','            reduce using rule 16
	'['            reduce using rule 16
	fst            reduce using rule 16
	snd            reduce using rule 16
	inr            reduce using rule 16
	inl            reduce using rule 16
	case           reduce using rule 16
	of             reduce using rule 16
	'|'            reduce using rule 16
	%eof           reduce using rule 16


State 48

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E '&&' E .                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 15
	float          reduce using rule 15
	var            reduce using rule 15
	bool           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	not            reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	end            reduce using rule 15
	lam            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	','            reduce using rule 15
	'['            reduce using rule 15
	fst            reduce using rule 15
	snd            reduce using rule 15
	inr            reduce using rule 15
	inl            reduce using rule 15
	case           reduce using rule 15
	of             reduce using rule 15
	'|'            reduce using rule 15
	%eof           reduce using rule 15


State 49

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E '<=' E .                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 14
	float          reduce using rule 14
	var            reduce using rule 14
	bool           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           fail
	'>'            fail
	'<'            fail
	'>='           fail
	'<='           fail
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	not            reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	end            reduce using rule 14
	lam            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	','            reduce using rule 14
	'['            reduce using rule 14
	fst            reduce using rule 14
	snd            reduce using rule 14
	inr            reduce using rule 14
	inl            reduce using rule 14
	case           reduce using rule 14
	of             reduce using rule 14
	'|'            reduce using rule 14
	%eof           reduce using rule 14


State 50

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E '>=' E .                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 13
	float          reduce using rule 13
	var            reduce using rule 13
	bool           reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           fail
	'>'            fail
	'<'            fail
	'>='           fail
	'<='           fail
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	not            reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	end            reduce using rule 13
	lam            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	','            reduce using rule 13
	'['            reduce using rule 13
	fst            reduce using rule 13
	snd            reduce using rule 13
	inr            reduce using rule 13
	inl            reduce using rule 13
	case           reduce using rule 13
	of             reduce using rule 13
	'|'            reduce using rule 13
	%eof           reduce using rule 13


State 51

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E '<' E .                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 12
	float          reduce using rule 12
	var            reduce using rule 12
	bool           reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           fail
	'>'            fail
	'<'            fail
	'>='           fail
	'<='           fail
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	not            reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	end            reduce using rule 12
	lam            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	','            reduce using rule 12
	'['            reduce using rule 12
	fst            reduce using rule 12
	snd            reduce using rule 12
	inr            reduce using rule 12
	inl            reduce using rule 12
	case           reduce using rule 12
	of             reduce using rule 12
	'|'            reduce using rule 12
	%eof           reduce using rule 12


State 52

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E '>' E .                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 11
	float          reduce using rule 11
	var            reduce using rule 11
	bool           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           fail
	'>'            fail
	'<'            fail
	'>='           fail
	'<='           fail
	'&&'           reduce using rule 11
	'||'           reduce using rule 11
	not            reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	end            reduce using rule 11
	lam            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	','            reduce using rule 11
	'['            reduce using rule 11
	fst            reduce using rule 11
	snd            reduce using rule 11
	inr            reduce using rule 11
	inl            reduce using rule 11
	case           reduce using rule 11
	of             reduce using rule 11
	'|'            reduce using rule 11
	%eof           reduce using rule 11


State 53

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E '==' E .                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 10
	float          reduce using rule 10
	var            reduce using rule 10
	bool           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           fail
	'>'            fail
	'<'            fail
	'>='           fail
	'<='           fail
	'&&'           reduce using rule 10
	'||'           reduce using rule 10
	not            reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	end            reduce using rule 10
	lam            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	','            reduce using rule 10
	'['            reduce using rule 10
	fst            reduce using rule 10
	snd            reduce using rule 10
	inr            reduce using rule 10
	inl            reduce using rule 10
	case           reduce using rule 10
	of             reduce using rule 10
	'|'            reduce using rule 10
	%eof           reduce using rule 10


State 54

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E '%' E .                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 9
	float          reduce using rule 9
	var            reduce using rule 9
	bool           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'%'            reduce using rule 9
	'=='           reduce using rule 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	'>='           reduce using rule 9
	'<='           reduce using rule 9
	'&&'           reduce using rule 9
	'||'           reduce using rule 9
	not            reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	end            reduce using rule 9
	lam            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	','            reduce using rule 9
	'['            reduce using rule 9
	fst            reduce using rule 9
	snd            reduce using rule 9
	inr            reduce using rule 9
	inl            reduce using rule 9
	case           reduce using rule 9
	of             reduce using rule 9
	'|'            reduce using rule 9
	%eof           reduce using rule 9


State 55

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E '/' E .                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 8
	float          reduce using rule 8
	var            reduce using rule 8
	bool           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'%'            reduce using rule 8
	'=='           reduce using rule 8
	'>'            reduce using rule 8
	'<'            reduce using rule 8
	'>='           reduce using rule 8
	'<='           reduce using rule 8
	'&&'           reduce using rule 8
	'||'           reduce using rule 8
	not            reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	end            reduce using rule 8
	lam            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	','            reduce using rule 8
	'['            reduce using rule 8
	fst            reduce using rule 8
	snd            reduce using rule 8
	inr            reduce using rule 8
	inl            reduce using rule 8
	case           reduce using rule 8
	of             reduce using rule 8
	'|'            reduce using rule 8
	%eof           reduce using rule 8


State 56

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E '*' E .                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 7
	float          reduce using rule 7
	var            reduce using rule 7
	bool           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'%'            reduce using rule 7
	'=='           reduce using rule 7
	'>'            reduce using rule 7
	'<'            reduce using rule 7
	'>='           reduce using rule 7
	'<='           reduce using rule 7
	'&&'           reduce using rule 7
	'||'           reduce using rule 7
	not            reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	end            reduce using rule 7
	lam            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	','            reduce using rule 7
	'['            reduce using rule 7
	fst            reduce using rule 7
	snd            reduce using rule 7
	inr            reduce using rule 7
	inl            reduce using rule 7
	case           reduce using rule 7
	of             reduce using rule 7
	'|'            reduce using rule 7
	%eof           reduce using rule 7


State 57

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E '-' E .                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 6
	float          reduce using rule 6
	var            reduce using rule 6
	bool           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           reduce using rule 6
	'>'            reduce using rule 6
	'<'            reduce using rule 6
	'>='           reduce using rule 6
	'<='           reduce using rule 6
	'&&'           reduce using rule 6
	'||'           reduce using rule 6
	not            reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	end            reduce using rule 6
	lam            reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	','            reduce using rule 6
	'['            reduce using rule 6
	fst            reduce using rule 6
	snd            reduce using rule 6
	inr            reduce using rule 6
	inl            reduce using rule 6
	case           reduce using rule 6
	of             reduce using rule 6
	'|'            reduce using rule 6
	%eof           reduce using rule 6


State 58

	E -> E . '+' E                                      (rule 5)
	E -> E '+' E .                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 5
	float          reduce using rule 5
	var            reduce using rule 5
	bool           reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'<'            reduce using rule 5
	'>='           reduce using rule 5
	'<='           reduce using rule 5
	'&&'           reduce using rule 5
	'||'           reduce using rule 5
	not            reduce using rule 5
	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	let            reduce using rule 5
	in             reduce using rule 5
	end            reduce using rule 5
	lam            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	','            reduce using rule 5
	'['            reduce using rule 5
	fst            reduce using rule 5
	snd            reduce using rule 5
	inr            reduce using rule 5
	inl            reduce using rule 5
	case           reduce using rule 5
	of             reduce using rule 5
	'|'            reduce using rule 5
	%eof           reduce using rule 5


State 59

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> '(' E E . ')'                                  (rule 20)
	E -> E . '[' var ']'                                (rule 31)

	')'            shift, and enter state 94
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45


State 60

	E -> '(' E ')' .                                    (rule 19)

	num            reduce using rule 19
	float          reduce using rule 19
	var            reduce using rule 19
	bool           reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'%'            reduce using rule 19
	'=='           reduce using rule 19
	'>'            reduce using rule 19
	'<'            reduce using rule 19
	'>='           reduce using rule 19
	'<='           reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	not            reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	let            reduce using rule 19
	in             reduce using rule 19
	end            reduce using rule 19
	lam            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	','            reduce using rule 19
	'['            reduce using rule 19
	fst            reduce using rule 19
	snd            reduce using rule 19
	inr            reduce using rule 19
	inl            reduce using rule 19
	case           reduce using rule 19
	of             reduce using rule 19
	'|'            reduce using rule 19
	%eof           reduce using rule 19


State 61

	E -> E '-' . E                                      (rule 6)
	E -> '-' . E                                        (rule 18)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 93

State 62

	E -> '(' E ',' . E ')'                              (rule 24)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 92

State 63

	E -> if E then . E else E                           (rule 21)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 91

State 64

	E -> let var '=' . E in E end                       (rule 22)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 90

State 65

	E -> lam var '->' . E                               (rule 23)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 89

State 66

	reg -> var '=' . E                                  (rule 34)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 88

State 67

	E -> '{' reglist '}' .                              (rule 30)

	num            reduce using rule 30
	float          reduce using rule 30
	var            reduce using rule 30
	bool           reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'%'            reduce using rule 30
	'=='           reduce using rule 30
	'>'            reduce using rule 30
	'<'            reduce using rule 30
	'>='           reduce using rule 30
	'<='           reduce using rule 30
	'&&'           reduce using rule 30
	'||'           reduce using rule 30
	not            reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	let            reduce using rule 30
	in             reduce using rule 30
	end            reduce using rule 30
	lam            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	','            reduce using rule 30
	'['            reduce using rule 30
	fst            reduce using rule 30
	snd            reduce using rule 30
	inr            reduce using rule 30
	inl            reduce using rule 30
	case           reduce using rule 30
	of             reduce using rule 30
	'|'            reduce using rule 30
	%eof           reduce using rule 30


State 68

	reglist -> reglist ',' . reg                        (rule 33)

	var            shift, and enter state 26

	reg            goto state 87

State 69

	E -> inr '_' T . '(' E ')'                          (rule 28)
	T -> T . '->' T                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T . '+' T                                      (rule 43)

	'('            shift, and enter state 86
	'+'            shift, and enter state 79
	'*'            shift, and enter state 80
	'->'           shift, and enter state 81


State 70

	T -> '(' . T ')'                                    (rule 45)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 85

State 71

	T -> '{' . reglistT '}'                             (rule 44)

	var            shift, and enter state 84

	reglistT       goto state 82
	regT           goto state 83

State 72

	T -> Int .                                          (rule 39)

	'('            reduce using rule 39
	')'            reduce using rule 39
	'+'            reduce using rule 39
	'*'            reduce using rule 39
	'->'           reduce using rule 39
	'}'            reduce using rule 39
	','            reduce using rule 39


State 73

	T -> Float .                                        (rule 40)

	'('            reduce using rule 40
	')'            reduce using rule 40
	'+'            reduce using rule 40
	'*'            reduce using rule 40
	'->'           reduce using rule 40
	'}'            reduce using rule 40
	','            reduce using rule 40


State 74

	T -> Bool .                                         (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	'+'            reduce using rule 38
	'*'            reduce using rule 38
	'->'           reduce using rule 38
	'}'            reduce using rule 38
	','            reduce using rule 38


State 75

	E -> inl '_' T . '(' E ')'                          (rule 27)
	T -> T . '->' T                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T . '+' T                                      (rule 43)

	'('            shift, and enter state 78
	'+'            shift, and enter state 79
	'*'            shift, and enter state 80
	'->'           shift, and enter state 81


State 76

	E -> case E of . '{' inl var '=>' E '|' inr var '=>' E '}'    (rule 29)

	'{'            shift, and enter state 77


State 77

	E -> case E of '{' . inl var '=>' E '|' inr var '=>' E '}'    (rule 29)

	inl            shift, and enter state 108


State 78

	E -> inl '_' T '(' . E ')'                          (rule 27)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 107

State 79

	T -> T '+' . T                                      (rule 43)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 106

State 80

	T -> T '*' . T                                      (rule 42)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 105

State 81

	T -> T '->' . T                                     (rule 41)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 104

State 82

	reglistT -> reglistT . ',' regT                     (rule 36)
	T -> '{' reglistT . '}'                             (rule 44)

	'}'            shift, and enter state 102
	','            shift, and enter state 103


State 83

	reglistT -> regT .                                  (rule 35)

	'}'            reduce using rule 35
	','            reduce using rule 35


State 84

	regT -> var . ':' T                                 (rule 37)

	':'            shift, and enter state 101


State 85

	T -> T . '->' T                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T . '+' T                                      (rule 43)
	T -> '(' T . ')'                                    (rule 45)

	')'            shift, and enter state 100
	'+'            shift, and enter state 79
	'*'            shift, and enter state 80
	'->'           shift, and enter state 81


State 86

	E -> inr '_' T '(' . E ')'                          (rule 28)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 99

State 87

	reglist -> reglist ',' reg .                        (rule 33)

	'}'            reduce using rule 33
	','            reduce using rule 33


State 88

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> E . '[' var ']'                                (rule 31)
	reg -> var '=' E .                                  (rule 34)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'}'            reduce using rule 34
	','            reduce using rule 34
	'['            shift, and enter state 45


State 89

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> lam var '->' E .                               (rule 23)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 23
	float          reduce using rule 23
	var            reduce using rule 23
	bool           reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	not            reduce using rule 23
	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	let            reduce using rule 23
	in             reduce using rule 23
	end            reduce using rule 23
	lam            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	','            reduce using rule 23
	'['            shift, and enter state 45
	fst            reduce using rule 23
	snd            reduce using rule 23
	inr            reduce using rule 23
	inl            reduce using rule 23
	case           reduce using rule 23
	of             reduce using rule 23
	'|'            reduce using rule 23
	%eof           reduce using rule 23


State 90

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> let var '=' E . in E end                       (rule 22)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	in             shift, and enter state 98
	'['            shift, and enter state 45


State 91

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> if E then E . else E                           (rule 21)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	else           shift, and enter state 97
	'['            shift, and enter state 45


State 92

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> '(' E ',' E . ')'                              (rule 24)
	E -> E . '[' var ']'                                (rule 31)

	')'            shift, and enter state 96
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45


State 93

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E '-' E .                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> '-' E .                                        (rule 18)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 6
	float          reduce using rule 6
	var            reduce using rule 6
	bool           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'%'            reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	'>='           reduce using rule 18
	'<='           reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	not            reduce using rule 6
	if             reduce using rule 6
	let            reduce using rule 6
	lam            reduce using rule 6
	'{'            reduce using rule 6
	','            reduce using rule 6
	'['            reduce using rule 18
	fst            reduce using rule 6
	snd            reduce using rule 6
	inr            reduce using rule 6
	inl            reduce using rule 6
	case           reduce using rule 6


State 94

	E -> '(' E E ')' .                                  (rule 20)

	num            reduce using rule 20
	float          reduce using rule 20
	var            reduce using rule 20
	bool           reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'%'            reduce using rule 20
	'=='           reduce using rule 20
	'>'            reduce using rule 20
	'<'            reduce using rule 20
	'>='           reduce using rule 20
	'<='           reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	not            reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	let            reduce using rule 20
	in             reduce using rule 20
	end            reduce using rule 20
	lam            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	','            reduce using rule 20
	'['            reduce using rule 20
	fst            reduce using rule 20
	snd            reduce using rule 20
	inr            reduce using rule 20
	inl            reduce using rule 20
	case           reduce using rule 20
	of             reduce using rule 20
	'|'            reduce using rule 20
	%eof           reduce using rule 20


State 95

	E -> E '[' var ']' .                                (rule 31)

	num            reduce using rule 31
	float          reduce using rule 31
	var            reduce using rule 31
	bool           reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'%'            reduce using rule 31
	'=='           reduce using rule 31
	'>'            reduce using rule 31
	'<'            reduce using rule 31
	'>='           reduce using rule 31
	'<='           reduce using rule 31
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	not            reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	let            reduce using rule 31
	in             reduce using rule 31
	end            reduce using rule 31
	lam            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	','            reduce using rule 31
	'['            reduce using rule 31
	fst            reduce using rule 31
	snd            reduce using rule 31
	inr            reduce using rule 31
	inl            reduce using rule 31
	case           reduce using rule 31
	of             reduce using rule 31
	'|'            reduce using rule 31
	%eof           reduce using rule 31


State 96

	E -> '(' E ',' E ')' .                              (rule 24)

	num            reduce using rule 24
	float          reduce using rule 24
	var            reduce using rule 24
	bool           reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'%'            reduce using rule 24
	'=='           reduce using rule 24
	'>'            reduce using rule 24
	'<'            reduce using rule 24
	'>='           reduce using rule 24
	'<='           reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	not            reduce using rule 24
	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	let            reduce using rule 24
	in             reduce using rule 24
	end            reduce using rule 24
	lam            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	','            reduce using rule 24
	'['            reduce using rule 24
	fst            reduce using rule 24
	snd            reduce using rule 24
	inr            reduce using rule 24
	inl            reduce using rule 24
	case           reduce using rule 24
	of             reduce using rule 24
	'|'            reduce using rule 24
	%eof           reduce using rule 24


State 97

	E -> if E then E else . E                           (rule 21)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 115

State 98

	E -> let var '=' E in . E end                       (rule 22)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 114

State 99

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> inr '_' T '(' E . ')'                          (rule 28)
	E -> E . '[' var ']'                                (rule 31)

	')'            shift, and enter state 113
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45


State 100

	T -> '(' T ')' .                                    (rule 45)

	'('            reduce using rule 45
	')'            reduce using rule 45
	'+'            reduce using rule 45
	'*'            reduce using rule 45
	'->'           reduce using rule 45
	'}'            reduce using rule 45
	','            reduce using rule 45


State 101

	regT -> var ':' . T                                 (rule 37)

	'('            shift, and enter state 70
	'{'            shift, and enter state 71
	Int            shift, and enter state 72
	Float          shift, and enter state 73
	Bool           shift, and enter state 74

	T              goto state 112

State 102

	T -> '{' reglistT '}' .                             (rule 44)

	'('            reduce using rule 44
	')'            reduce using rule 44
	'+'            reduce using rule 44
	'*'            reduce using rule 44
	'->'           reduce using rule 44
	'}'            reduce using rule 44
	','            reduce using rule 44


State 103

	reglistT -> reglistT ',' . regT                     (rule 36)

	var            shift, and enter state 84

	regT           goto state 111

State 104

	T -> T . '->' T                                     (rule 41)
	T -> T '->' T .                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T . '+' T                                      (rule 43)

	'('            reduce using rule 41
	')'            reduce using rule 41
	'+'            shift, and enter state 79
	'*'            shift, and enter state 80
	'->'           shift, and enter state 81
	'}'            reduce using rule 41
	','            reduce using rule 41


State 105

	T -> T . '->' T                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T '*' T .                                      (rule 42)
	T -> T . '+' T                                      (rule 43)

	'('            reduce using rule 42
	')'            reduce using rule 42
	'+'            reduce using rule 42
	'*'            reduce using rule 42
	'->'           reduce using rule 42
	'}'            reduce using rule 42
	','            reduce using rule 42


State 106

	T -> T . '->' T                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T . '+' T                                      (rule 43)
	T -> T '+' T .                                      (rule 43)

	'('            reduce using rule 43
	')'            reduce using rule 43
	'+'            reduce using rule 43
	'*'            shift, and enter state 80
	'->'           reduce using rule 43
	'}'            reduce using rule 43
	','            reduce using rule 43


State 107

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> inl '_' T '(' E . ')'                          (rule 27)
	E -> E . '[' var ']'                                (rule 31)

	')'            shift, and enter state 110
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45


State 108

	E -> case E of '{' inl . var '=>' E '|' inr var '=>' E '}'    (rule 29)

	var            shift, and enter state 109


State 109

	E -> case E of '{' inl var . '=>' E '|' inr var '=>' E '}'    (rule 29)

	'=>'           shift, and enter state 117


State 110

	E -> inl '_' T '(' E ')' .                          (rule 27)

	num            reduce using rule 27
	float          reduce using rule 27
	var            reduce using rule 27
	bool           reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'%'            reduce using rule 27
	'=='           reduce using rule 27
	'>'            reduce using rule 27
	'<'            reduce using rule 27
	'>='           reduce using rule 27
	'<='           reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	not            reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	let            reduce using rule 27
	in             reduce using rule 27
	end            reduce using rule 27
	lam            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	'['            reduce using rule 27
	fst            reduce using rule 27
	snd            reduce using rule 27
	inr            reduce using rule 27
	inl            reduce using rule 27
	case           reduce using rule 27
	of             reduce using rule 27
	'|'            reduce using rule 27
	%eof           reduce using rule 27


State 111

	reglistT -> reglistT ',' regT .                     (rule 36)

	'}'            reduce using rule 36
	','            reduce using rule 36


State 112

	regT -> var ':' T .                                 (rule 37)
	T -> T . '->' T                                     (rule 41)
	T -> T . '*' T                                      (rule 42)
	T -> T . '+' T                                      (rule 43)

	'+'            shift, and enter state 79
	'*'            shift, and enter state 80
	'->'           shift, and enter state 81
	'}'            reduce using rule 37
	','            reduce using rule 37


State 113

	E -> inr '_' T '(' E ')' .                          (rule 28)

	num            reduce using rule 28
	float          reduce using rule 28
	var            reduce using rule 28
	bool           reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'%'            reduce using rule 28
	'=='           reduce using rule 28
	'>'            reduce using rule 28
	'<'            reduce using rule 28
	'>='           reduce using rule 28
	'<='           reduce using rule 28
	'&&'           reduce using rule 28
	'||'           reduce using rule 28
	not            reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	let            reduce using rule 28
	in             reduce using rule 28
	end            reduce using rule 28
	lam            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	','            reduce using rule 28
	'['            reduce using rule 28
	fst            reduce using rule 28
	snd            reduce using rule 28
	inr            reduce using rule 28
	inl            reduce using rule 28
	case           reduce using rule 28
	of             reduce using rule 28
	'|'            reduce using rule 28
	%eof           reduce using rule 28


State 114

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> let var '=' E in E . end                       (rule 22)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	end            shift, and enter state 116
	'['            shift, and enter state 45


State 115

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> if E then E else E .                           (rule 21)
	E -> E . '[' var ']'                                (rule 31)

	num            reduce using rule 21
	float          reduce using rule 21
	var            reduce using rule 21
	bool           reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	not            reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	let            reduce using rule 21
	in             reduce using rule 21
	end            reduce using rule 21
	lam            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	'['            shift, and enter state 45
	fst            reduce using rule 21
	snd            reduce using rule 21
	inr            reduce using rule 21
	inl            reduce using rule 21
	case           reduce using rule 21
	of             reduce using rule 21
	'|'            reduce using rule 21
	%eof           reduce using rule 21


State 116

	E -> let var '=' E in E end .                       (rule 22)

	num            reduce using rule 22
	float          reduce using rule 22
	var            reduce using rule 22
	bool           reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'%'            reduce using rule 22
	'=='           reduce using rule 22
	'>'            reduce using rule 22
	'<'            reduce using rule 22
	'>='           reduce using rule 22
	'<='           reduce using rule 22
	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	not            reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	let            reduce using rule 22
	in             reduce using rule 22
	end            reduce using rule 22
	lam            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	'['            reduce using rule 22
	fst            reduce using rule 22
	snd            reduce using rule 22
	inr            reduce using rule 22
	inl            reduce using rule 22
	case           reduce using rule 22
	of             reduce using rule 22
	'|'            reduce using rule 22
	%eof           reduce using rule 22


State 117

	E -> case E of '{' inl var '=>' . E '|' inr var '=>' E '}'    (rule 29)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 118

State 118

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> case E of '{' inl var '=>' E . '|' inr var '=>' E '}'    (rule 29)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'['            shift, and enter state 45
	'|'            shift, and enter state 119


State 119

	E -> case E of '{' inl var '=>' E '|' . inr var '=>' E '}'    (rule 29)

	inr            shift, and enter state 120


State 120

	E -> case E of '{' inl var '=>' E '|' inr . var '=>' E '}'    (rule 29)

	var            shift, and enter state 121


State 121

	E -> case E of '{' inl var '=>' E '|' inr var . '=>' E '}'    (rule 29)

	'=>'           shift, and enter state 122


State 122

	E -> case E of '{' inl var '=>' E '|' inr var '=>' . E '}'    (rule 29)

	num            shift, and enter state 2
	float          shift, and enter state 4
	var            shift, and enter state 5
	bool           shift, and enter state 6
	'('            shift, and enter state 7
	'-'            shift, and enter state 8
	not            shift, and enter state 9
	if             shift, and enter state 10
	let            shift, and enter state 11
	lam            shift, and enter state 12
	'{'            shift, and enter state 13
	fst            shift, and enter state 14
	snd            shift, and enter state 15
	inr            shift, and enter state 16
	inl            shift, and enter state 17
	case           shift, and enter state 18

	E              goto state 123

State 123

	E -> E . '+' E                                      (rule 5)
	E -> E . '-' E                                      (rule 6)
	E -> E . '*' E                                      (rule 7)
	E -> E . '/' E                                      (rule 8)
	E -> E . '%' E                                      (rule 9)
	E -> E . '==' E                                     (rule 10)
	E -> E . '>' E                                      (rule 11)
	E -> E . '<' E                                      (rule 12)
	E -> E . '>=' E                                     (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '&&' E                                     (rule 15)
	E -> E . '||' E                                     (rule 16)
	E -> case E of '{' inl var '=>' E '|' inr var '=>' E . '}'    (rule 29)
	E -> E . '[' var ']'                                (rule 31)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'*'            shift, and enter state 35
	'/'            shift, and enter state 36
	'%'            shift, and enter state 37
	'=='           shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'>='           shift, and enter state 41
	'<='           shift, and enter state 42
	'&&'           shift, and enter state 43
	'||'           shift, and enter state 44
	'}'            shift, and enter state 124
	'['            shift, and enter state 45


State 124

	E -> case E of '{' inl var '=>' E '|' inr var '=>' E '}' .    (rule 29)

	num            reduce using rule 29
	float          reduce using rule 29
	var            reduce using rule 29
	bool           reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'%'            reduce using rule 29
	'=='           reduce using rule 29
	'>'            reduce using rule 29
	'<'            reduce using rule 29
	'>='           reduce using rule 29
	'<='           reduce using rule 29
	'&&'           reduce using rule 29
	'||'           reduce using rule 29
	not            reduce using rule 29
	if             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	let            reduce using rule 29
	in             reduce using rule 29
	end            reduce using rule 29
	lam            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	','            reduce using rule 29
	'['            reduce using rule 29
	fst            reduce using rule 29
	snd            reduce using rule 29
	inr            reduce using rule 29
	inl            reduce using rule 29
	case           reduce using rule 29
	of             reduce using rule 29
	'|'            reduce using rule 29
	%eof           reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 46
Number of terminals: 46
Number of non-terminals: 7
Number of states: 125
